# -*- coding: utf-8 -*-
"""Machine Problem No1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-EAF1R90i06dZdYJ7OxSkNvZ6_X2JRQN

Import
"""

import csv
from datetime import datetime

"""Login Functions"""

def impl(P, Q):
  return (not P) or Q

def tf(b: bool) -> str:
  return "T" if b else "F"

"""Logger"""

def log_result(student_name, rule_name, result):
  with open ("logic_result.csv", "a", newline="") as file:
    write = csv.writer(file)
    write.writerow([datetime.now().strftime("%Y-%m-%d %H:%M:%S"), student_name, rule_name, result])

"""Rule 1"""

def attendance_rule(student_name):
  print("\n--- Attendance Rule Checker ---")
  late = input("Is the student late? (T/F): ").strip().upper() == "T"
  excuse = input("Did the student bring an excuse letter? (T/F:) ").strip().upper() == "T"

  result = impl(late, excuse)
  outcome = "Satisfied" if result else "Violated"

  print(f"P = {tf(late)} (Late), Q = {tf(excuse)} (Excuse Letter)")

  log_result(student_name, "Attendance Rule", outcome)

"""Rule 2"""

def grading_rule(student_name):
  print("\n--- Grading Rule Checker ---")
  try:
    grade = float(input("Enter student grade: "))
  except ValueError:
    print("Invalid grade input.")
    return

  P = grade >= 75
  Q = grade >= 75
  outcome = "Satisfied" if P else "Violated"

  print(f"P = {tf(P)} (grade >= 75), Q = {tf(Q)} (student passes)")
  print("Result:", outcome)

  log_result(student_name, "Grading Rule", outcome)

"""Rule 3"""

def login_rule(student_name):
  print("\n--- Login Rule Checker ---")
  correct_password = "admin123"
  attempt = input("Enter Password: ")

  P = attempt == correct_password
  Q = attempt == correct_password
  outcome = "Access Granted" if P else "Access Denied"

  print(f"P = {tf(P)} (Password Correct), Q = {tf(Q)} (Access Granted)")
  print("Result:", outcome)

  log_result(student_name, "Login Rule", outcome)

"""Rule 4"""

def bonus_rule(student_name):
  print("\n--- Bonus Rule Eligibility Checker ---")
  regular = input("Does the student have regular attendance? (T/F): ").strip().upper() == "T"
  bonus = regular
  result = impl(regular, bonus)
  outcome = "Satisfied" if result else "Violated"

  print(f"P = {tf(regular)} (Regular Attendance), Q = {tf(bonus)} (Bonus Eligible)")
  print("Result:", outcome)

  log_result(student_name, "Bonus Rule", outcome)

"""Rule 5: Library Borrowing"""

def library_borrowing_rule(student_name):
  print("\n--- Library Borrowing Rule Checker ---")
  id_valid = input("Is the student ID valid? (T/F): ").strip().upper() == "T"

  allowed_to_borrow = id_valid

  result = impl(id_valid, allowed_to_borrow)
  outcome = "Allowed to Borrow" if result and id_valid else "Not Allowed to Borrow"

  print(f"P = {tf(id_valid)} (ID is valid), Q = {tf(allowed_to_borrow)} (Allowed to borrow books)")
  print("Result:", outcome)

  log_result(student_name, "Library Borrowing Rule", outcome)

"""Rule 6: Enrollment Clearance"""

def enrollment_clearance_rule(student_name):
  print("\n--- Enrollment Clearance Rule Checker ---")
  fees_paid = input("Are the student's fees paid? (T/F): ").strip().upper() == "T"


  enrollment_confirmed = fees_paid
  result = impl(fees_paid, enrollment_confirmed)
  outcome = "Enrollment Confirmed" if result and fees_paid else "Enrollment Not Confirmed"

  print(f"P = {tf(fees_paid)} (Fees are paid), Q = {tf(enrollment_confirmed)} (Enrollment confirmed)")
  print("Result:", outcome)

  log_result(student_name, "Enrollment Clearance Rule", outcome)

"""Rule 7: Laboratory Access"""

def laboratory_access_rule(student_name):
  print("\n--- Laboratory Access Rule Checker ---")

  safety_gear_worn = input("Is safety gear worn? (T/F): ").strip().upper() == "T"
  access_granted = safety_gear_worn

  result = impl(safety_gear_worn, access_granted)
  outcome = "Access Granted" if result and safety_gear_worn else "Access Denied"

  print(f"P = {tf(safety_gear_worn)} (Safety gear is worn), Q = {tf(access_granted)} (Access granted)")
  print("Result:", outcome)

  log_result(student_name, "Laboratory Access Rule", outcome)

"""Main Menu"""

def main():
  print("--- University Logic Rules System ---")
  student_name = input("Enter student name: ").strip()

  while True:
    print("\n\n======== Main Menu ========")
    print("1) Attendance Rule Checker")
    print("2) Grading Rule Checker")
    print("3) Login Rule Checker")
    print("4) Bonus Points Checker")
    print("5) Library Borrowing Rule Checker")
    print("6) Enrollment Clearance Rule Checker")
    print("7) Laboratory Access Rule Checker")
    print("8) Exit")

    choice = input("Choose an option (1-8): ").strip()

    if choice == "1":
      attendance_rule(student_name)
    elif choice == "2":
      grading_rule(student_name)
    elif choice == "3":
      login_rule(student_name)
    elif choice == "4":
      bonus_rule(student_name)
    elif choice == "5":
      library_borrowing_rule(student_name)
    elif choice == "6":
      enrollment_clearance_rule(student_name)
    elif choice == "7":
      laboratory_access_rule(student_name)
    elif choice == "8":
      print("Exiting...")
      print("Results saved to logic_results.csv")
      break
    else:
      print("Invalid choice. Try again.")

if __name__ == "__main__":
  with open("logic_results.csv", "a+", newline="") as file:
    file.seek(0, 2)
    if file.tell() == 0:
      writer = csv.writer(file)
      writer.writerow(["Timestamp", "Student Name", "Rule", "Outcome"])
    main()
